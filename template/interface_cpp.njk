/*
 * Copyright (c) 2017 The Bacardi Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "{{idl_dir_name}}/{{name | snakecase}}_bridge.h"
#include "js_type_traits.h"

#include "core/native_type_traits.h"

void {{name}}Bridge::Init(Napi::Env env, Napi::Object exports) {
  Napi::Function js_constructor =
      DefineClass(env, "{{name}}",
                  {
                      {% for member in members %}
                      {% if member.is_static %}
                      StaticMethod("{{member.name}}", &{{name}}Bridge::
                          {{-member.name | camelcase}}),
                      {% else %}
                      InstanceMethod("{{member.name}}", &{{name}}Bridge::
                          {{-member.name | camelcase}}),
                      {% endif %}
                      {% endfor %}
                  });
  exports.Set("{{name}}", js_constructor);
}

{{name}}Bridge::{{name}}Bridge(const Napi::CallbackInfo& info)
    : Napi::ObjectWrap<{{name}}Bridge>(info) {
  int argumentLength = info.Length();
  if ({{constructors.length}} == 0 && argumentLength == 0) {
    impl_.reset(new {{name}} ());
    return;
  }

  {% for idl_constructor in constructors %} 
    // FIXME(yjaeseok): This if statement needs to apply optimization.
    if (argumentLength == {{idl_constructor.arguments.length}}
      {% for argument in idl_constructor.arguments %} 
        && NativeTypeTraits<IDL{{argument.type | camelcase-}}>::IsTypeEquals(info[{{loop.index - 1}}])
      {% endfor %}) {
      impl_.reset(new {{name}} (
      {% for argument in idl_constructor.arguments %} 
        NativeTypeTraits<IDL{{argument.type | camelcase-}}>::NativeValue(info.Env(), info[{{loop.index - 1}}]){% if not loop.last %},{% endif %}
      {% endfor %}));
      return;
    }
  {% endfor %}

  Napi::Error::New(info.Env(), "There is no valid constructor.")
      .ThrowAsJavaScriptException();
}

{% for member in members %}
Napi::Value {{name}}Bridge::{{member.name | camelcase}}(const Napi::CallbackInfo& info) {
  if (info.Length() != {{member.arguments.length}}) {
    Napi::RangeError::New(info.Env(), "Wrong number of arguments.")
        .ThrowAsJavaScriptException();
    return Napi::Value();
  }

  {% for argument in member.arguments %}
  auto {{argument.name}} = NativeTypeTraits<IDL{{argument.type | camelcase-}}
      >::NativeValue(info.Env(), info[{{loop.index - 1}}]);
  if (info.Env().IsExceptionPending()) {
    return Napi::Value();
  }
  {% endfor %}

  {% if member.type != "void" %}
  auto return_value =
  {% endif %}
  {% if member.is_static -%}
  {{name}}::
  {% else %}
  impl_->
  {% endif %}
  {{member.name | camelcase}}(
      {{-member.arguments[0].name-}}
      {%- for i in range(1, member.arguments.length) -%}
      , {{member.arguments[i].name-}}
      {% endfor %});
  {% if member.type == "void" %}
  return Napi::Value();
  {% else %}
  return JSTypeTraits(info.Env(), return_value);
  {% endif %}
}

{% endfor %}
